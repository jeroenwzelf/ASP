WHEN SENDING A REJ, IN THE SERVER IT IS CURRENTLY IMPOSSIBLE TO KNOW HOW MANY SAMPLES WERE SENT IN THE PREVIOUS PACKETS.

An ASP (Audio Streaming Protocol) packet is defined as:

0		7 8		15 16	 23 24		31
+--------+--------+--------+--------+
| Source Port	  | Dest. Port		|
+--------+--------+--------+--------+
| Flags	 |  Seq#  | Length			|
+--------+--------+--------+--------+
| Checksum		  | Data octets		|
+--------+--------+--------+--------+
| more data octets	...
|				...
+---------------...

The Source Port field contains the port from which the packet is sent.

The Dest. Port field contains the port to which the packet is sent.

The Flags field contains information about the goal of the packet (for example, to Acknowledge) and/or the type of data in the Data octets field.
	ACK: 1					(00000001),
	REJ: 2					(00000010),
	NEW_CLIENT: 4			(00000100),
	DATA_WAV_HEADER: 8		(00001000),
	DATA_WAV_SAMPLES: 16	(00010000),
	NEXT_EVENT: 32			(00100000),
	QUALITY_DOWN: 64		(01000000),
	QUALITY_UP: 128			(10000000),

The Seq# field is there for packet identification. When some packets don't arrive, this sequence number is used to resend these missing packets.

The Length field specifies how many 8-bit pairs of data the Data field has.
	(The Length field is 16 bits long, meaning the payload of an ASP packet can contain a maximum of 65535 octets)

The Checksum field makes it possible to validate packets, and is specified in RFC 1071.
	A short explanation of generating the checksum:
		(1)  Adjacent octets to be checksummed are paired to form 8-bit
		integers, and the 1's complement sum of these 8-bit integers is
		formed.

		(2)  To generate a checksum, the checksum field itself is cleared,
		the 16-bit 1's complement sum is computed over the octets
		concerned, and the 1's complement of this sum is placed in the
		checksum field.
	A short explanation of validating a packet:
		(1)  To check a checksum, the 1's complement sum is computed over the
		same set of octets, including the checksum field. If the result
		is all 1 bits (-0 in 1's complement arithmetic), the check
		succeeds.
	(for more info, check: https://tools.ietf.org/html/rfc1071)

The Data octets field contains the payload of the packet. The data can be of any form and server and client have to be able to agree on the form of the payload using the flags in the Flags field to parse the Data field.



Consequently, an ASP packet is at least 5 * 16 = 96 bits long.
A packet with this size would have a Length field of 0000000000000000, and there would be no Data octets in the packet.


For an implementation of an ASP packet in C, check Implementation/asp_packet.c.

=============================================
Registering a client on a server
=============================================
As a client, you will have to send an ASP packet with the NEW_CLIENT flag, along with the additional info of the maximum size of wav data info they can receive.
By the definition of this protocol, the server will always run on port 1235.

0		7 8		15 16	 23 24		31
+--------+--------+--------+--------+
| Source Port	  | 1235			|
+--------+--------+--------+--------+
|00000100|  Seq#  | 4				|					An ASP packet that a client sends to register to the server
+--------+--------+--------+--------+
| Checksum		  | Buffer size		|
+--------+--------+--------+--------+

When the server registers a client, it opens another socket on another port to be able to stream audio to the new client while still being able to receive other new clients. It will send an ASP packet with the NEW_CLIENT flag back containing the port of this new socket.

0		7 8		15 16	 23 24		31
+--------+--------+--------+--------+
| 1235			  | Dest. Port		|
+--------+--------+--------+--------+
|00000100|  Seq#  | 4				|					An ASP packet that a server sends back to the client.
+--------+--------+--------+--------+
| Checksum		  | new socket port	|
+--------+--------+--------+--------+

The client then has to listen to this new port for incoming audio info, and will send any necessary ACK's or REJ's to this port too.


=============================================
Sending audio samples using ASP
=============================================
A packet containing Audio samples will always look like:

0		7 8		15 16	 23 24		31
+--------+--------+--------+--------+
| Source Port	  | Dest. Port		|
+--------+--------+--------+--------+
|00010000|  Seq#  | Length			|					An ASP packet containing WAV samples.
+--------+--------+--------+--------+
| Checksum		  | sample octets	|
+--------+--------+--------+--------+
| more audio sample octets	...
|				...
+---------------...

The server will send a batch of 20 packets like this, with Sequence Number 0 - 19. It will then wait for an acknowledgement packet from the client, which looks like:

0		7 8		15 16	 23 24		31
+--------+--------+--------+--------+
| Source Port	  | Dest. Port		|
+--------+--------+--------+--------+
|00000001|  Seq#  | 0				|					An ASP ACK packet.
+--------+--------+--------+--------+
| Checksum		  | 
+--------+--------+

If the client hasn't received all 20 packets containing samples, it can send a rejection packet instead of ACK-ing the batch, like this:

0		7 8		15 16	 23 24		31
+--------+--------+--------+--------+
| Source Port	  | Dest. Port		|
+--------+--------+--------+--------+
|00000010|  Seq#  | 0				|					An ASP REJ packet.
+--------+--------+--------+--------+
| Checksum		  | Sequence Number |
+--------+--------+--------+--------+

The data contains the sequence number of the last packet of the batch the client has received. The server will start a new batch using the packets that came after the packet with that sequence number.

If all goes well, the server gets an ACK packet, and it will send the next batch of packets, until there are no more samples.
When there are no more samples, the server lets the client know the stream ended by sending a packet with the NEXT_EVENT flag.